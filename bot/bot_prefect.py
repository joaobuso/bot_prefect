"""
Bot Prefect - Vers√£o Otimizada com Logs
Autor: Manus AI
Data: 09/09/2025

Este arquivo cont√©m um bot Prefect otimizado com sistema de logs detalhado,
tratamento de erros e configura√ß√µes flex√≠veis.
"""

import datetime
import logging
import os
import sys
from typing import Optional
from prefect import flow, task, get_run_logger
from prefect.logging import get_logger


# Configura√ß√£o do sistema de logs
def configurar_logging():
    """Configura o sistema de logging para o bot."""
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(sys.stdout),
        ]
    )
    return logging.getLogger(__name__)

# Logger global
logger = configurar_logging()

@task(name="Inicializar Bot", retries=2, retry_delay_seconds=30)
def inicializar_bot() -> dict:
    """
    Inicializa o bot e verifica as configura√ß√µes necess√°rias.
    
    Returns:
        dict: Informa√ß√µes de inicializa√ß√£o do bot
    """
    task_logger = get_run_logger()
    
    try:
        inicio = datetime.datetime.now()
        task_logger.info("ü§ñ Iniciando bot...")
        
        # Verificar configura√ß√µes do ambiente
        configuracoes = {
            "inicio_execucao": inicio.isoformat(),
            "versao_python": sys.version,
            "diretorio_trabalho": os.getcwd(),
            "usuario": os.getenv("USER", "desconhecido"),
            "timezone": str(inicio.astimezone().tzinfo)
        }
        
        task_logger.info(f"‚úÖ Bot inicializado com sucesso √†s {inicio}")
        task_logger.info(f"üìä Configura√ß√µes: {configuracoes}")
        
        return configuracoes
        
    except Exception as e:
        task_logger.error(f"‚ùå Erro na inicializa√ß√£o do bot: {str(e)}")
        raise

@task(name="Executar L√≥gica Principal", retries=1, retry_delay_seconds=60)
def executar_logica_principal(configuracoes: dict) -> dict:
    """
    Executa a l√≥gica principal do bot.
    
    Args:
        configuracoes (dict): Configura√ß√µes de inicializa√ß√£o
        
    Returns:
        dict: Resultados da execu√ß√£o
    """
    task_logger = get_run_logger()
    
    try:
        inicio_execucao = datetime.datetime.now()
        task_logger.info("üîÑ Executando l√≥gica principal do bot...")
        
        # Aqui voc√™ pode adicionar sua l√≥gica espec√≠fica do bot
        # Por exemplo: processar dados, fazer requisi√ß√µes API, etc.
        
        # Simula√ß√£o de processamento
        import time
        time.sleep(2)  # Simula processamento
        
        fim_execucao = datetime.datetime.now()
        duracao = (fim_execucao - inicio_execucao).total_seconds()
        
        resultados = {
            "inicio": inicio_execucao.isoformat(),
            "fim": fim_execucao.isoformat(),
            "duracao_segundos": duracao,
            "status": "sucesso",
            "itens_processados": 10,  # Exemplo
            "mensagem": f"Bot executado com sucesso em {duracao:.2f} segundos"
        }
        
        task_logger.info(f"‚úÖ L√≥gica principal executada com sucesso")
        task_logger.info(f"‚è±Ô∏è Dura√ß√£o: {duracao:.2f} segundos")
        task_logger.info(f"üìà Itens processados: {resultados['itens_processados']}")
        
        return resultados
        
    except Exception as e:
        task_logger.error(f"‚ùå Erro na execu√ß√£o da l√≥gica principal: {str(e)}")
        raise

@task(name="Finalizar Execu√ß√£o")
def finalizar_execucao(configuracoes: dict, resultados: dict) -> dict:
    """
    Finaliza a execu√ß√£o do bot e gera relat√≥rio final.
    
    Args:
        configuracoes (dict): Configura√ß√µes de inicializa√ß√£o
        resultados (dict): Resultados da execu√ß√£o
        
    Returns:
        dict: Relat√≥rio final da execu√ß√£o
    """
    task_logger = get_run_logger()
    
    try:
        fim_total = datetime.datetime.now()
        inicio_total = datetime.datetime.fromisoformat(configuracoes["inicio_execucao"])
        duracao_total = (fim_total - inicio_total).total_seconds()
        
        relatorio_final = {
            "configuracoes": configuracoes,
            "resultados": resultados,
            "fim_execucao": fim_total.isoformat(),
            "duracao_total_segundos": duracao_total,
            "status_final": "concluido_com_sucesso"
        }
        
        task_logger.info("üèÅ Finalizando execu√ß√£o do bot...")
        task_logger.info(f"‚è±Ô∏è Dura√ß√£o total: {duracao_total:.2f} segundos")
        task_logger.info(f"üìã Status final: {relatorio_final['status_final']}")
        task_logger.info("üéâ Bot executado com sucesso!")
        
        return relatorio_final
        
    except Exception as e:
        task_logger.error(f"‚ùå Erro na finaliza√ß√£o: {str(e)}")
        raise

@flow(
    name="Bot Prefect - Execu√ß√£o Completa",
    description="Flow principal do bot com sistema de logs detalhado",
    log_prints=True,
    retries=1,
    retry_delay_seconds=120
)
def fluxo_bot_completo() -> dict:
    """
    Flow principal que orquestra toda a execu√ß√£o do bot.
    
    Returns:
        dict: Relat√≥rio completo da execu√ß√£o
    """
    flow_logger = get_run_logger()
    
    try:
        flow_logger.info("üöÄ Iniciando flow do bot...")
        
        # Etapa 1: Inicializa√ß√£o
        configuracoes = inicializar_bot()
        
        # Etapa 2: Execu√ß√£o da l√≥gica principal
        resultados = executar_logica_principal(configuracoes)
        
        # Etapa 3: Finaliza√ß√£o
        relatorio_final = finalizar_execucao(configuracoes, resultados)
        
        flow_logger.info("‚úÖ Flow do bot conclu√≠do com sucesso!")
        
        return relatorio_final
        
    except Exception as e:
        flow_logger.error(f"‚ùå Erro no flow do bot: {str(e)}")
        raise

# Vers√£o simplificada (compat√≠vel com o c√≥digo original)
@task(name="Executar Bot Simples")
def executar_bot():
    """Vers√£o simplificada para compatibilidade com o c√≥digo original."""
    task_logger = get_run_logger()
    agora = datetime.datetime.now()
    mensagem = f"Bot rodando √†s {agora}"
    task_logger.info(mensagem)
    task_logger.info(f"Log teste {datetime.datetime.now()}")
    print(mensagem)  # Mant√©m compatibilidade com o c√≥digo original
    return mensagem

@flow(
    name="Bot Prefect - Vers√£o Simples",
    description="Vers√£o simplificada do bot (compat√≠vel com c√≥digo original)",
    log_prints=True
)
def fluxo_bot():
    """Flow simplificado para compatibilidade com o c√≥digo original."""
    return executar_bot()

if __name__ == "__main__":
    # Voc√™ pode escolher qual vers√£o executar:
    
    # Vers√£o completa (recomendada)
    print("Executando vers√£o completa do bot...")
    resultado_completo = fluxo_bot_completo()
    print(f"Resultado: {resultado_completo}")
    
    # Ou vers√£o simples (compat√≠vel com c√≥digo original)
    # print("Executando vers√£o simples do bot...")
    # fluxo_bot()
